name: 'Accuknox Semgrep Scan'
description: 'Perform Semgrep scan on your repository and upload the results to Accuknox'

inputs:
  token:
    description: 'The token for authenticating with the CSPM panel.'
    required: true
  tenant_id:
    description: 'The ID of the tenant associated with the CSPM panel.'
    required: true
  label:
    description: 'The label created in AccuKnox SaaS for associating scan results.'
    required: true
  endpoint:
    description: 'The URL of the CSPM panel to push the scan results to.'
    required: true
    default: 'cspm.demo.accuknox.com'
  subcommand:
    description: 'Semgrep subcommand to run (e.g. ci, scan)'
    required: true
    default: 'scan'
  config:
    description: 'Semgrep ruleset or config file'
    required: false
  extra_args:
    description: 'Additional arguments to pass to semgrep'
    required: false
    default: ''
  paths:
    description: 'Paths to scan'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
    - name: Run Semgrep
      uses: docker://semgrep/semgrep:latest
      with:
        args: >-
          bash -c "
          semgrep ${{ inputs.subcommand }} \
            --json \
            --output semgrep-results.json \
            ${{ inputs.config != '' && format('--config {0}', inputs.config) || '' }} \
            ${{ inputs.extra_args }} \
            ${{ inputs.paths }}"

    - name: Process Results
      shell: bash
      run: |
        jq -c . semgrep-results.json | \
        jq --arg repo "${{ github.repository }}" \
          --arg sha "${{ github.sha }}" \
          --arg ref "${{ github.ref }}" \
          --arg run_id "${{ github.run_id }}" \
          --arg run_number "${{ github.run_number }}" \
          --arg repo_url "${{ github.server_url }}/${{ github.repository }}" \
          --arg repo_run_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          '. + {
            repo: $repo,
            sha: $sha,
            ref: $ref,
            run_id: $run_id,
            run_number: $run_number,
            repo_url: $repo_url,
            repo_run_url: $repo_run_url,
          }' > results.json

    - name: Extract Code Snippets
      shell: bash
      run: |
        JSON_FILE="results.json"
        TEMP_JSON_FILE="/tmp/semgrep_output_updated.json"
        
        # Make a copy to work with
        cp "$JSON_FILE" "$TEMP_JSON_FILE"
        
        # Get total results count
        COUNT=$(jq '.results | length' "$JSON_FILE")
        
        # Process each result
        for ((i=0; i<$COUNT; i++)); do
          file_path=$(jq -r ".results[$i].path" "$JSON_FILE")
          start_line=$(jq -r ".results[$i].start.line" "$JSON_FILE")
          end_line=$(jq -r ".results[$i].end.line" "$JSON_FILE")
          
          echo "Processing file: $file_path (Lines: $start_line-$end_line)"
          
          if [ -f "$file_path" ]; then
            # Extract the snippet and properly escape it for JSON
            snippet=$(sed -n "${start_line},${end_line}p" "$file_path" | jq -Rs .)
            
            # Update the JSON using a simpler jq filter
            jq --argjson idx "$i" --arg code "$snippet" \
              '.results[$idx].extra.lines = ($code | fromjson)' \
              "$TEMP_JSON_FILE" > temp.json && mv temp.json "$TEMP_JSON_FILE"
          else
            echo "Warning: File $file_path not found!"
          fi
        done
        
        # Replace original with updated file
        mv "$TEMP_JSON_FILE" "$JSON_FILE"

outputs:
  results-file:
    description: 'Path to the JSON results file'
    value: results.json